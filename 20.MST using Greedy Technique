#include<stdio.h>
struct edge
{
	int u,v,weight;
};
int parent[100];
int find(int v)
{
	if(parent[v]==v)
	{
	    return v;
	}
	return find(parent[v]);
}
void unionsets(int u,int v)
{
	parent[find(u)]=find(v);
}
void kruskal(struct edge edges[],int n,int e)
{
	int totalweight=0;
	for(int i=0;i<n;i++)
	{
		parent[i]=i;
	}
	for(int i=0;i<e-1;i++)
	{
		for(int j=0;j<e-i-1;j++)
		{
			if(edges[j].weight>edges[j+1].weight)
			{
				struct edge temp=edges[j];
				edges[j]=edge[j+1];
				edge[j+1]=temp;
			}
		}
	}
	printf("edges in the minimum spanning tree:\n");
	for(int i=0;i<e;i++)
	{
		int u=edges[i].u;
		int v=edges[i].v;
		if(find(u)!=find(v))
		{
			printf("%d--%d==%d\n",u,v,edges[i].weight);
			totalweight+=edges[i].weight;
			unionsets(u,v);
		}
	}
	printf("total weight of the MST :%d\n",totalweight);
}
int main()
{
	int n,e;
	printf("enter the number of vertices:");
	scanf("%d",&n);
	printf("enter the number of edges:");
	scanf("%d",&e);
	struct edge edges[e];
	printf("Enter the edges(u v weight):\n");
	for(int i=0;i<e;i++)
	{
		scanf("%d%d%d",&edges[i].u,&edges[i].v,&edges[i].weight);
	}
	kruskal(edges,n,e);
	return 0;
}
